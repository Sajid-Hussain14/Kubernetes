# A Deployment manages a set of Pods to run an application workload, usually one that doesn't maintain state.
# A Deployment provides declarative updates for Pods and ReplicaSets.

# You describe a desired state in a Deployment, and the Deployment Controller changes the actual state to the desired state at a controlled rate. You can define Deployments to create new ReplicaSets, or to remove existing Deployments and adopt all their resources with new Deployments.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-deployment
  labels:
    app: mongo
spec:
  replicas: 1 #you can decide the number of replicas as per the requirements
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
      - name: mongo
        image: mongo:6.0
        ports:
        - containerPort: 27017 #make sure to change the port number here
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: mongo-secret   #details of secret.yaml
              key: username
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongo-secret   #details of secret.yaml
              key: password

#WRIRTING SERVICES FILE 
# Expose an application running in your cluster behind a single outward-facing endpoint, even when the workload is split across multiple backends.
# In Kubernetes, a Service is a method for exposing a network application that is running as one or more Pods in your cluster.

# A key aim of Services in Kubernetes is that you don't need to modify your existing application to use an unfamiliar service discovery mechanism. You can run code in Pods, whether this is a code designed for a cloud-native world, or an older app you've containerized. You use a Service to make that set of Pods available on the network so that clients can interact with it.
---
apiVersion: v1
kind: Service
metadata:
  name: mongo-service
spec:
  selector:
    app: mongo #service is attached to the deployment
  ports:
    - protocol: TCP
      port: 27017 #you can change the port number
      targetPort: 27017 #port of the container